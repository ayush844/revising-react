Virtual DOM, Fibre and reconciliation

******************************************************************************************************************************
// VIRTUAL DOM:

In React.js, the Virtual DOM is a concept used to improve performance and optimize the updating process of the user interface. Here's a brief explanation:

> DOM (Document Object Model): The DOM represents the structure of a document in the form of a tree. Each element in the document, such as a paragraph or a div, is a node in this tree.

> Virtual DOM: The Virtual DOM is a lightweight copy of the actual DOM. When you render a React component, instead of directly updating the DOM, React first creates a Virtual DOM representation of the UI elements.

*******************************************************************************************************************************
> Diffing Algorithm: When there's a change in the state of a component, React calculates the difference between the current Virtual DOM and the previous one using a process called RECONCILIATION. This is done efficiently by comparing the new Virtual DOM with the previous one, finding out what has changed.
*******************************************************************************************************************************

> Minimizing DOM Manipulation: Once React identifies the differences, it only updates the necessary parts of the actual DOM, rather than re-rendering the entire UI. This makes the updating process faster and more efficient.

> Batching Updates: React often batches multiple updates together and performs them all at once, further optimizing performance.

In summary, the Virtual DOM in React helps in making UI updates faster by minimizing direct manipulation of the actual DOM, thus improving the overall performance of React applications.


******************************************************************************************************************************

~ What is reconciliation?


> reconciliation
The algorithm React uses to diff one tree with another to determine which parts need to be changed.

> update
A change in the data used to render a React app. Usually the result of `setState`. Eventually results in a re-render.


The central idea of React's API is to think of updates as if they cause the entire app to re-render. This allows the developer to reason declaratively, rather than worry about how to efficiently transition the app from any particular state to another (A to B, B to C, C to A, and so on).

Actually re-rendering the entire app on each change only works for the most trivial apps; in a real-world app, it's prohibitively costly in terms of performance. React has optimizations which create the appearance of whole app re-rendering while maintaining great performance. The bulk of these optimizations are part of a process called reconciliation.

*****
Reconciliation is the algorithm behind what is popularly understood as the "virtual DOM." A high-level description goes something like this: when you render a React application, a tree of nodes that describes the app is generated and saved in memory. This tree is then flushed to the rendering environment — for example, in the case of a browser application, it's translated to a set of DOM operations. When the app is updated (usually via setState), a new tree is generated. The new tree is diffed with the previous tree to compute which operations are needed to update the rendered app.
*****

******************************************************************************************************************************

// FIBER

//*****
# Although Fiber is a ground-up rewrite of the reconciler, the high-level algorithm described in the React docs will be largely the same. The key points are:
> Different component types are assumed to generate substantially different trees. React will not attempt to diff them, but rather replace the old tree completely.
***
> Diffing of lists is performed using keys. Keys should be "stable, predictable, and unique."
***
//*****


the key is used in list because react (internally use fiber) using key optimize the performance




The main points are:

> In a UI, it's not necessary for every update to be applied immediately; in fact, doing so can be wasteful, causing frames to drop and degrading the user experience.

> Different types of updates have different priorities — an animation update needs to complete more quickly than, say, an update from a data store.

> A push-based approach requires the app (you, the programmer) to decide how to schedule work. A pull-based approach allows the framework (React) to be smart and make those decisions for you.


-----------------------------------------------------------------------------------------------------------------------------


We've established that a primary goal of Fiber is to enable React to take advantage of scheduling. Specifically, we need to be able to

> pause work and come back to it later.
> assign priority to different types of work.
> reuse previously completed work.
> abort work if it's no longer needed.

In order to do any of this, we first need a way to break work down into units. In one sense, that's what a fiber is. A fiber represents a unit of work.


-----------------------------------------------------------------------------------------------------------------------------


React Fiber is a reimplementation of the React reconciliation algorithm. It was introduced to address performance issues and enable better handling of asynchronous operations, such as rendering, updates, and interactions, in React applications.

Here's a brief explanation of React Fiber:

1. **Fiber Architecture**: Fiber is a new internal architecture of React that restructures the way React manages the rendering process. It allows React to break down its rendering work into smaller units called fibers.

2. **Incremental Rendering**: With Fiber, React can prioritize and schedule its work more effectively. It introduces the concept of time-slicing, which enables React to break rendering work into chunks and allocate time for other tasks, such as handling user interactions and updating state, in between.

3. **Improved Responsiveness**: By breaking rendering work into smaller chunks and utilizing time-slicing, React Fiber can provide a more responsive user experience. It prevents the browser from becoming unresponsive during heavy rendering tasks by interleaving rendering work with other tasks.

4. **Support for Concurrent Mode**: React Fiber lays the foundation for Concurrent Mode in React. Concurrent Mode allows React to work on multiple tasks concurrently, such as rendering, updating state, and handling user interactions, without blocking the main thread.

5. **Better Error Handling**: React Fiber improves error handling and debugging capabilities. It introduces better error boundaries and stack reconciliation, which helps in identifying and fixing errors in React applications more easily.

In summary, React Fiber is a significant internal reimplementation of React's core algorithm, aimed at improving performance, responsiveness, and concurrency handling in React applications. It introduces concepts like time-slicing and incremental rendering to optimize the rendering process and provide a smoother user experience.